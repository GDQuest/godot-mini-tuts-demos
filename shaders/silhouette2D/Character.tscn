[gd_scene load_steps=16 format=2]

[ext_resource path="res://Character.gd" type="Script" id=1]
[ext_resource path="res://guard.png" type="Texture" id=2]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 10, 2 )

[sub_resource type="AtlasTexture" id=2]
atlas = ExtResource( 2 )
region = Rect2( 0, 0, 48, 48 )

[sub_resource type="AtlasTexture" id=3]
atlas = ExtResource( 2 )
region = Rect2( 48, 0, 48, 48 )

[sub_resource type="AtlasTexture" id=4]
atlas = ExtResource( 2 )
region = Rect2( 96, 0, 48, 48 )

[sub_resource type="AtlasTexture" id=5]
atlas = ExtResource( 2 )
region = Rect2( 144, 0, 48, 48 )

[sub_resource type="AtlasTexture" id=6]
atlas = ExtResource( 2 )
region = Rect2( 192, 0, 48, 48 )

[sub_resource type="AtlasTexture" id=7]
atlas = ExtResource( 2 )
region = Rect2( 240, 0, 48, 48 )

[sub_resource type="SpriteFrames" id=8]
animations = [ {
"frames": [ SubResource( 2 ), SubResource( 3 ), SubResource( 4 ), SubResource( 5 ), SubResource( 6 ), SubResource( 7 ) ],
"loop": true,
"name": "default",
"speed": 10.0
} ]

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

void fragment() {
	float alpha = texture(TEXTURE, UV).a;
	COLOR.r = 10.0 * alpha;
	COLOR.a = alpha;
}"
custom_defines = ""

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )

[sub_resource type="ViewportTexture" id=11]
viewport_path = NodePath("Viewport")

[sub_resource type="Shader" id=12]
code = "shader_type canvas_item;

// The output color for the outline
uniform vec4 outline_color : hint_color;

void fragment() {
	vec4 screen_color = texture(SCREEN_TEXTURE, SCREEN_UV);
	vec4 tex_color = texture(TEXTURE, UV);
	COLOR = tex_color;

	if (screen_color.r < 10.0){
		COLOR.rgb = outline_color.rgb;
		
		// We convert the pixel width we want for our outline in decimal texel size.
		vec2 size = vec2(1.0) / vec2(textureSize(TEXTURE, 0));
		
		// We sample and offset the texture 8 times to draw an outline.
		float alpha = tex_color.a;
		alpha += texture(TEXTURE, UV + vec2(0.0, -size.y)).a;
		alpha += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
		alpha += texture(TEXTURE, UV + vec2(size.x, 0.0)).a;
		alpha += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
		alpha += texture(TEXTURE, UV + vec2(0.0, size.y)).a;
		alpha += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
		alpha += texture(TEXTURE, UV + vec2(-size.x, 0.0)).a;
		alpha += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
		
		// If the summed alpha is too high, it means we're over the original texture
		// and we don't want to draw this pixel; it's not part of the outline.
		if (alpha >= 9.0) {
			alpha = 0.0;
		}
		
		// We then override the texture's color with the calculated outline.
		COLOR = vec4(outline_color.rgb, min(alpha, 1.0) * tex_color.a);
	}
}"
custom_defines = ""

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 12 )
shader_param/outline_color = Color( 0.0156863, 0.909804, 1, 1 )

[node name="Character" type="KinematicBody2D"]
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 0, -2 )
shape = SubResource( 1 )

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 32, 32 )
transparent_bg = true
hdr = false
usage = 0
render_target_v_flip = true
render_target_update_mode = 3

[node name="AnimatedSprite" type="AnimatedSprite" parent="Viewport"]
position = Vector2( 16, 16 )
frames = SubResource( 8 )
playing = true

[node name="Mask" type="Sprite" parent="."]
material = SubResource( 10 )
texture = SubResource( 11 )
offset = Vector2( 0, -16 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 13 )
z_index = 10
texture = SubResource( 11 )
offset = Vector2( 0, -16 )
